#!/usr/bin/env bash

#
# tk == 'Tool Kit'
# This script is the entry point for all the build tooling and functions. It will find the appropriate
# script/tool to execute based on the project you are in
#
# The current default naive implementation just searches for bin/<task>[.sh|.ts|.js|] up the folder hierachy,
# or until it reaches the root dir, and falls back to tk built in defaults after that
#

set -Eeuo pipefail & set -e

tk_cwd="$PWD"
root_dir="$(dirname "$(realpath "${0%/..}")")/.."
user_home="$HOME"
deno_dir="${user_home}/.tk/deno-dir"
tk_dir="${user_home}/.tk"


cd "$root_dir" # set the CWD to the root dir
source bin/.common-include.sh

function invoke_deno_script(){
  script="$1"
  shift
  script_args="$@"

  script_dir="$(dirname "$script")/.."

  if ! command -v deno &> /dev/null; then
    	echo "'deno' is not installed'" 
      $root_dir/bin/deno-install.sh
	fi

  #echo "executing deno script '$script' in dir '$script_dir'"

  #extract deno options from script header
  deno_args="$(head -3 "$script" | grep 'deno-args:' | cut -d ':' -f2)"
  if [[ "$deno_args" == "" ]]; then
      deno_args="--allow-all --unstable $script"
  fi

  pushd "$script_dir" >/dev/null
    env \
    TK_CWD="$tk_cwd" \
    TK_SCRIPT_ROOT="$root_dir" \
    TK_TASK_ARGS="$script_args" \
    TK_WORK_DIR="$tk_dir" \
    DENO_DIR="$deno_dir" \
    deno run $deno_args $script_args
  popd >/dev/null
}

tried_script_path=()

function invoke_script(){
  file="$1"
  shift
  script_args="$@"

  if [[ $file == *".ts" ]]; then
    invoke_deno_script "$file" $script_args
  else
    script_dir="$(dirname "$file")"
    #echo "executing script '$file'"
    pushd "$script_dir/.."
     "$file" $script_args
    popd
  fi  
}

function invoke_builtin_task(){
  script="$1"
  shift
  script_args="$@"

  try_scripts=( "$root_dir/bin/$script" "$root_dir/bin/$script.sh" "$root_dir/bin/tk.$script.sh" "$root_dir/bin/tasks/$script.ts" "$root_dir/bin/tasks/tk.$script.ts" )
  for file in ${try_scripts[@]}; do
    file="$($_realpath "$file")"
    tried_script_path+=("$file")
    #echo "trying: $file"
    if [[ -f "$file" ]]; then
      invoke_script "$file" "$script_args"
      return
    fi
  done

  echo "could not find script for task '$script'. Tried:"
  for path in ${tried_script_path[@]}; do
    echo "  '$path'"
  done
  exit 1
}


function invoke_task(){
  script="$1"
  shift
  script_args="$@"

  tried_script_path=()

  # don't allow overrides for builtin tasks
  if [[ $script == "tk."* ]]; then
    script=$(echo "$script" | cut -d'.' -f 2- )
    invoke_builtin_task "$script" "$script_args"
    return
  fi
  #echo "invoke script: $script, args: $script_args "
  
  cur_dir="$tk_cwd"
  # try to find a script to exdcute the given task
  while [ 1 ]; do
    try_scripts=("$cur_dir/bin/$script" "$cur_dir/bin/$script.sh" "$cur_dir/bin/$script.ts")
    for file in ${try_scripts[@]}; do
      tried_script_path+=("$file")
      #echo "trying: $file"
      if [[ -f "$file" ]]; then
        invoke_script "$file" $script_args
        return
      fi
    done
    # if it's the workspace root, stop
    if [[ -f "$cur_dir/projects.json" ]] || [[ -f "$cur_dir/tk.projects.json" ]]; then
      invoke_builtin_task "$script" $script_args
      return
    else
      # walk up one dir and try again
      #echo "cur_dir=$cur_dir"
      cur_dir="$($_realpath $cur_dir/..)"
      # if we hit the root, stop
      if [[ "$cur_dir" == '/' ]] || [[ "$cur_dir" == "$user_home" ]] ; then
        invoke_builtin_task "$script" $script_args
        return
      fi
    fi
  done
}

function parse_args_and_invoke_tasks(){
  # loop through all the args
  while [ 1 ]; do
    arg="$1"
    shift || true
    if [[ "$arg" == '--'* ]]; then
      # TODO
      echo "TODO:global opt:$arg"
    else 
      if [[ "$arg" == "" ]]; then
        echo "ERR: No task provided"
        arg="tk.help"
      fi
      invoke_task "$arg" $@
      return
    fi
  done
  # make sure 
}

parse_args_and_invoke_tasks "$@"
